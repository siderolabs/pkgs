name: kernel
variant: scratch
shell: /toolchain/bin/bash
dependencies:
  - stage: kernel-prepare
steps:
  - env:
      ARCH: {{ if eq .ARCH "aarch64"}}arm64{{ else if eq .ARCH "x86_64" }}x86_64{{ else }}unsupported{{ end }}
      CARCH: {{ if eq .ARCH "aarch64"}}arm64{{ else if eq .ARCH "x86_64" }}amd64{{ else }}unsupported{{ end }}
      KARCH: {{ if eq .ARCH "aarch64"}}ARM64{{ else if eq .ARCH "x86_64" }}X86_64{{ else }}unsupported{{ end }}
    prepare:
      - |
        cp -a /src/. .

        cp -v /pkg/config-${CARCH} .config

        patch -p0 < /pkg/patches/sign-file.patch
      - |
        python3 /toolchain/kconfig-hardened-check/bin/kconfig-hardened-check -c .config -p ${KARCH} -m json | python3 /pkg/scripts/filter-hardened-check.py
    build:
      - |
        make -j $(nproc)
        make -j $(nproc) modules
        if [[ "${ARCH}" == "arm64" ]]; then
          echo "Compiling device-tree blobs"
          make -j $(nproc) dtbs
        fi
    install:
      - |
        mkdir -p /rootfs/boot
        mkdir -p /rootfs/dtb
        case $ARCH in
            x86_64)
                mv arch/x86/boot/bzImage /rootfs/boot/vmlinuz
            ;;
            arm64)
                mv arch/arm64/boot/Image /rootfs/boot/vmlinuz
                cd ./arch/arm64/boot/dts
                for vendor in $(find . -not -path . -type d); do
                  dest="/rootfs/dtb/$vendor"
                  mkdir -v $dest
                  find ./$vendor/* -type f -name "*.dtb" -exec cp {} $dest \;
                done
                cd -
            ;;
            *)
                echo "unsupported arch ${ARCH}"
                exit 1
            ;;
        esac

        export KERNELRELEASE=$(cat include/config/kernel.release)
        make -j $(nproc) modules_install DEPMOD=/toolchain/bin/depmod INSTALL_MOD_PATH=/rootfs
        depmod -b /rootfs $KERNELRELEASE
        unlink /rootfs/lib/modules/$KERNELRELEASE/build
        unlink /rootfs/lib/modules/$KERNELRELEASE/source
finalize:
  - from: /rootfs
    to: /
